package eu.cloud4soa.c4sgitservice.ws;

import eu.cloud4soa.c4sgitservice.dao.GitRepoRepository;
import eu.cloud4soa.c4sgitservice.dao.PubKeyRepository;
import eu.cloud4soa.c4sgitservice.dao.UserRepository;
import eu.cloud4soa.c4sgitservice.datamodel.GitRepo;
import eu.cloud4soa.c4sgitservice.datamodel.PubKey;
import eu.cloud4soa.c4sgitservice.datamodel.User;
import eu.cloud4soa.c4sgitservice.utils.Util;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

import javax.jws.WebMethod;
import javax.jws.WebService;
import java.io.InputStream;
import java.util.List;


@WebService
@Component
public class GitServices extends SpringBeanAutowiringSupport {

    protected final Log logger = LogFactory.getLog(getClass());

    @Autowired
    PubKeyRepository pubkeydao;

    @Autowired
    UserRepository userdao;

    @Autowired
    GitRepoRepository repodao;

    //the first time the file has to be generated by ssh-agent
    private final String AUTHORIZED_KEYS_FILE    = "/home/pgouvas/.ssh/authorized_keys";
    private final String C4SOA_SERVER_PUBLIC_KEY = "/home/pgouvas/.ssh/id_rsa.pub";
    private final String PROXY_GIT_FILE          = "/home/pgouvas/proxy-git";
    private final String SERVER_ACCOUNT_NAME     = "pgouvas";
    private final String SERVER_IP_ADDRESS       = "192.168.1.69";


    /*
    * Key Handling Methods
    */

    @WebMethod
    public String[] getC4SOAPublicKey(String username, String password) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                try {
                    String pub = Util.readfile(C4SOA_SERVER_PUBLIC_KEY);
                    logger.info("Success-Public Key Fetched " );
                    res = new String[]{"0",pub};
                } catch (Exception e) {
                    logger.error("Error reading public key file");
                    res = new String[]{"1","Error reading public key file"};
                }
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
        return res;
    }

    @WebMethod
    public String[] generateKeyPairForUser(String username, String password) {
        String[] res = {"1","Internal Server Error"};
        int retvalue=0;
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                //Step 1 - Execute command
                try {
                    //File temp = File.createTempFile("i-am-a-temp-file", ".tmp" );
                    //String absolutePath = temp.getAbsolutePath();
                    //System.out.println("File path : " + absolutePath);
                    Process child = Runtime.getRuntime().exec(new String[] {"ssh-keygen", //
                            "-q"            , // quiet
                            "-t", "rsa"     , //
                            "-P", ""      , // Zero password
                            "-C", username  , //
                            "-f", username    //
                    });
                    child.waitFor();

                    //Get the input stream and read from it
                    InputStream in = child.getInputStream();
                    int c;
                    while ((c = in.read()) != -1) {
                        //System.out.print((char)c);
                    }
                    in.close();
                    retvalue = child.exitValue();
                    logger.info("ssh-keygen returned: "+ retvalue);
                    //Step 2 - read file
                    if (retvalue == 0){ //Everything OK
                        try{
                            String pub,priv="";
                            pub = Util.readfile(username + ".pub");
                            priv = Util.readfile(username);
                            //cleanup
                            try {
                                String command1 = "rm "+username+".pub";
                                Process child1 = Runtime.getRuntime().exec(command1);
                                String command2 = "rm "+username;
                                Process child2 = Runtime.getRuntime().exec(command2);
                                child1.waitFor();
                                child2.waitFor();
                                logger.info("Success-Key-Pair created for User with username: " );
                                res = new String[]{"0",pub,priv};
                            } catch (Exception ex) {
                                logger.error("Error-Cleaning temporary files");
                                res = new String[]{"1","Error-Cleaning temporary files"};
                            }
                        } catch (Exception ex){
                            logger.error("Error-Reading temporary files");
                            res = new String[]{"1","Error-Reading temporary files"};
                        }
                    } else {
                        logger.error("Error-Internal ssh-keygen error");
                        res = new String[]{"1","Internal ssh-keygen error"};
                    }
                } catch (Exception ex) {
                    logger.error("Error-Internal Server Error while executing ssh-keygen");
                    res = new String[]{"1","Error-Internal Server Error while executing ssh-keygen"};
                }

            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }

        return res;
    }

  /*
   * Key Handling Methods
   */
    @WebMethod
    public String[] registerPublicKeyForUser(String username, String password, String rsa_pub_key) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                List<PubKey> pubkeys = pubkeydao.findByPubkey(rsa_pub_key);
                if (pubkeys.isEmpty()){
                    PubKey pubKey = new PubKey();
                    pubKey.setPubkey(rsa_pub_key);
                    pubKey.setUser(user);
                    pubkeydao.save(pubKey);
                    //write to file
                    String segment = Util.createAuthorizedKeysSegment(PROXY_GIT_FILE,pubKey.getPubkeyid()+"",rsa_pub_key);
                    Util.appendToFile(AUTHORIZED_KEYS_FILE,segment);
                    logger.info("Success-User with username: " + username + " registered pubkey");
                    res = new String[]{"0","OK"};

                } else {
                    logger.error("User with username: "+username+" already contains the key");
                    res = new String[]{"1","Error-User with username: "+username+" already contains the key"};
                }
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
    return res;
    }

    @WebMethod
    public String[] deletePublicKeyFromUser(String username, String password, String rsa_pub_key_id) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                try{
                    List<PubKey> pubkeys = pubkeydao.findByUserAndPubkeyid(user,new Long(rsa_pub_key_id) );
                    if (!pubkeys.isEmpty()){
                        //delete them from file first
                        for (int i = 0; i < pubkeys.size(); i++) {
                            PubKey pubKey =  pubkeys.get(i);
                            Util.replaceBlockWithSedForAuthorizedKeys(AUTHORIZED_KEYS_FILE, rsa_pub_key_id);
                        }
                        //delete them from the database
                        pubkeydao.delete(pubkeys);
                        logger.info("Success-Deleted pubkey for user with username: " + username );
                        res = new String[]{"0","OK"};
                    } else {
                        logger.error("User with username: "+username+" does not contain the specific pubkey");
                        res = new String[]{"1","User with username: \"+username+\" does not contain the specific pubkey"};
                    }
                }  catch(Exception ex){
                    logger.error("Error-Internal Server Error "+ex);
                    res = new String[]{"1","Error-Internal Server Error "+ex};
                }
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
        return res;
    }

    @WebMethod
    public String[] getPublicKeysForUser(String username, String password) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                List<PubKey> pubkeys = pubkeydao.findByUser(user);
                    logger.info("Success-User with username: " + username + " has "+pubkeys.size()+" keys");
                    String ret="0";
                    for (int i = 0; i < pubkeys.size(); i++) {
                        PubKey pubKey = pubkeys.get(i);
                        //in the first one we have to append a comma in after the "0"
                        ret+=","+pubKey.getPubkeyid()+","+pubKey.getPubkey();
                    }
                    res = ret.split(",");
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
        return res;
    }


   /*
    * Repo Handling Methods
    */

    @WebMethod
    public String[] registerGitRepository(String username, String password, String proxyname, String giturl , String reponame) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                GitRepo gitrepo = new GitRepo();
                gitrepo.setProxyname(proxyname);
                gitrepo.setGiturl(giturl);
                gitrepo.setGitrepo(reponame);
                gitrepo.setUser(user);
                repodao.save(gitrepo);
                String segment = Util.createProxyGitSegment(gitrepo.getGitrepoid()+"",proxyname,giturl,reponame);
                Util.appendToFile(PROXY_GIT_FILE,segment);
                logger.info("Success-Repo created" );
                String gitcommand = "git remote add origin "+SERVER_ACCOUNT_NAME+"@"+SERVER_IP_ADDRESS+":"+proxyname;
                res = new String[]{"0","OK - You should execute "+gitcommand};
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
        return res;
    }

    @WebMethod
    public String[] getGitRepositories(String username, String password) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                List<GitRepo> repos = repodao.findByUser(user);
                logger.info("Success-User with username: " + username + " has "+repos.size()+" repos");
                String ret="0";
                for (int i = 0; i < repos.size(); i++) {
                    GitRepo gitrepo = repos.get(i);
                    //in the first one we have to append a comma in after the "0"
                    ret+=","+gitrepo.getGitrepoid()+","+gitrepo.getProxyname();
                }
                res = ret.split(",");
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
        return res;
    }

    //TODO create method findByUserAndProxyName  in git dao
    //TODO create method deleteGirRepositoryFromUserByProxyname
    //TODO change #repoid to #repoproxy
    //TODO check unique proxy during add
    //TODO add configuration file


    @WebMethod
    public String[] deleteGitRepositoryFromUser(String username, String password, String repoid) {
        String[] res = {"1","Internal Server Error"};
        if (userdao != null) {
            List userlist =  userdao.findByUsernameAndPassword(username, password);
            if (userlist != null && !userlist.isEmpty()) {
                User user = (User) userlist.get(0);
                try{
                    List<GitRepo> repos = repodao.findByUserAndGitrepoid(user, new Long(repoid));
                    if (!repos.isEmpty()){
                        //delete them from file
                        for (int i = 0; i < repos.size(); i++) {
                            GitRepo gitRepo =  repos.get(i);
                            Util.replaceBlockWithSedForProxyGit(PROXY_GIT_FILE, repoid);
                        }
                        //delete them from the database
                        repodao.delete(repos);
                        logger.info("Success-Deleted proxyname for user with username: " + username );
                        res = new String[]{"0","OK"};
                    } else {
                        logger.error("User with username: "+username+" does not contain the specific repository");
                        res = new String[]{"1","User with username: \"+username+\" does not contain the specific repository"};
                    }
                }   catch (Exception ex) {
                    logger.error("Error-Internal Server Error "+ex);
                    res = new String[]{"1","Error-Internal Server Error "+ex};
                }
            } else {
                logger.error("User with username: "+username+" password: "+password+" does not exist");
                res = new String[]{"1","Error-User with username: "+username+" password: "+password+" does not exist"};
            }
        } else {
            logger.error("SpringBean userdao cannot be instantiated");
            res = new String[]{"1","Error-Internal Server - Spring Bean cannot be initialized"};
        }
        return res;
    }

}